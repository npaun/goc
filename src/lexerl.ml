# 2 "lexerl.mll"
 
open Parser
open Printf
exception Eof
exception LexFailure of string

let line_num = ref 1

let keyword_table = Hashtbl.create 53;;
let _ = List.iter (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
[ "var"     , VAR;
  "string"  , STRING;
  "int"     , INT;
  "float"   , FLOAT;
  "boolean" , BOOL;
  "bool"    , BOOL;
  "if"      , IF;
  "else"    , ELSE;
  "while"   , WHILE;
  "read"    , READ;
  "print"   , PRINT;
  "true"    , TRUE;(*BOOLLIT(true);*)
  "false"   , FALSE(*BOOLLIT(false)*)
 ];;

let string_of_token = function
    | VAR           -> "VAR"
    | STRING        -> "STRING"
    | INT           -> "INT"
    | FLOAT         -> "FLOAT"
    | BOOL          -> "BOOL"
    | IF            -> "IF"
    | ELSE          -> "ELSE"
    | WHILE         -> "WHILE"
    | READ          -> "READ"
    | PRINT         -> "PRINT"
    | TRUE          -> "TRUE"
    | FALSE         -> "FALSE"
    | SEMICOLON     -> "SEMICOLON"
    | COLON         -> "COLON"
    | PLUS          -> "PLUS"
    | MINUS         -> "MINUS"
    | TIMES         -> "TIMES"
    | DIV           -> "DIV"
    | EQUAL         -> "EQUAL"
    | NEQUAL        -> "NEQUAL"
    | GEQ           -> "GEQ"
    | LEQ           -> "LEQ"
    | GREATER       -> "GREATER"
    | LESSER        -> "LESSER"
    | AND           -> "AND"
    | OR            -> "OR"
    | NOT           -> "NOT"
    | LPAREN        -> "LPAREN"
    | RPAREN        -> "RPAREN"
    | LBLOCK        -> "LBLOCK"
    | RBLOCK        -> "RBLOCK"
    | ASSIGN        -> "ASSIGN"
    | INTLIT(i)     -> "INTLIT(" ^ string_of_int i ^ ")"
    | FLOATLIT(f)   -> "FLOATLIT(" ^ string_of_float f ^ ")"
    | STRINGLIT(s)  -> "STRINGLIT(" ^ s ^ ")"
    | BOOLLIT(b)    -> "BOOLLIT(" ^ string_of_bool b ^ ")"
    | IDENT(s)      -> "IDENT(" ^ s ^ ")"
    | NOP           -> ""
    | EOF           -> "eof"
    

# 70 "lexerl.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\227\255\228\255\078\000\001\000\000\000\155\000\234\255\
    \235\255\236\255\237\255\012\000\001\000\002\000\003\000\030\000\
    \031\000\248\255\249\255\250\255\251\255\252\255\001\000\253\255\
    \047\000\255\255\254\255\246\255\245\255\244\255\243\255\240\255\
    \239\255\165\000\177\000\187\000\197\000\230\255\002\000\168\000\
    \190\000\005\000\254\255\002\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\026\000\028\000\023\000\023\000\255\255\
    \255\255\255\255\255\255\028\000\028\000\014\000\013\000\017\000\
    \022\000\255\255\255\255\255\255\255\255\255\255\028\000\255\255\
    \008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\023\000\023\000\024\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\001\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\255\255\039\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\000\000\040\000\039\000\
    \040\000\042\000\000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\025\000\023\000\023\000\044\000\022\000\000\000\044\000\
    \000\000\000\000\043\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \025\000\015\000\004\000\037\000\000\000\000\000\012\000\031\000\
    \010\000\009\000\017\000\019\000\000\000\018\000\033\000\024\000\
    \005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\020\000\021\000\013\000\016\000\014\000\030\000\
    \029\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\028\000\027\000\038\000\026\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\008\000\011\000\007\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \032\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\000\000\000\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\033\000\037\000\034\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\033\000\
    \037\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\000\000\
    \002\000\255\255\255\255\000\000\038\000\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\038\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\022\000\043\000\000\000\255\255\041\000\
    \255\255\255\255\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\004\000\255\255\255\255\000\000\012\000\
    \000\000\000\000\000\000\000\000\255\255\000\000\005\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
    \014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\015\000\016\000\004\000\024\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \011\000\255\255\255\255\255\255\255\255\255\255\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\255\255\255\255\255\255\255\255\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\006\000\039\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\033\000\033\000\033\000\
    \033\000\033\000\033\000\033\000\033\000\033\000\033\000\034\000\
    \040\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\255\255\
    \000\000\004\000\038\000\255\255\039\000\041\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \039\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\040\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 73 "lexerl.mll"
                 ( token lexbuf )
# 230 "lexerl.ml"

  | 1 ->
# 74 "lexerl.mll"
                ( comment lexbuf )
# 235 "lexerl.ml"

  | 2 ->
# 75 "lexerl.mll"
                ( line_num := !line_num + 1; token lexbuf )
# 240 "lexerl.ml"

  | 3 ->
# 76 "lexerl.mll"
                ( SEMICOLON )
# 245 "lexerl.ml"

  | 4 ->
# 77 "lexerl.mll"
                ( COLON )
# 250 "lexerl.ml"

  | 5 ->
# 78 "lexerl.mll"
                ( PLUS )
# 255 "lexerl.ml"

  | 6 ->
# 79 "lexerl.mll"
                ( MINUS )
# 260 "lexerl.ml"

  | 7 ->
# 80 "lexerl.mll"
                ( TIMES )
# 265 "lexerl.ml"

  | 8 ->
# 81 "lexerl.mll"
                ( DIV )
# 270 "lexerl.ml"

  | 9 ->
# 82 "lexerl.mll"
                ( EQUAL )
# 275 "lexerl.ml"

  | 10 ->
# 83 "lexerl.mll"
                ( NEQUAL )
# 280 "lexerl.ml"

  | 11 ->
# 84 "lexerl.mll"
                ( GEQ )
# 285 "lexerl.ml"

  | 12 ->
# 85 "lexerl.mll"
                ( LEQ )
# 290 "lexerl.ml"

  | 13 ->
# 86 "lexerl.mll"
                ( GREATER )
# 295 "lexerl.ml"

  | 14 ->
# 87 "lexerl.mll"
                ( LESSER )
# 300 "lexerl.ml"

  | 15 ->
# 88 "lexerl.mll"
                ( AND )
# 305 "lexerl.ml"

  | 16 ->
# 89 "lexerl.mll"
                ( OR )
# 310 "lexerl.ml"

  | 17 ->
# 90 "lexerl.mll"
                ( NOT )
# 315 "lexerl.ml"

  | 18 ->
# 91 "lexerl.mll"
                ( LPAREN )
# 320 "lexerl.ml"

  | 19 ->
# 92 "lexerl.mll"
                ( RPAREN )
# 325 "lexerl.ml"

  | 20 ->
# 93 "lexerl.mll"
                ( LBLOCK )
# 330 "lexerl.ml"

  | 21 ->
# 94 "lexerl.mll"
                ( RBLOCK )
# 335 "lexerl.ml"

  | 22 ->
# 95 "lexerl.mll"
                ( ASSIGN )
# 340 "lexerl.ml"

  | 23 ->
let
# 96 "lexerl.mll"
                                   lxm
# 346 "lexerl.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 96 "lexerl.mll"
                                                      ( INTLIT(int_of_string lxm) )
# 350 "lexerl.ml"

  | 24 ->
let
# 97 "lexerl.mll"
                                            lxm
# 356 "lexerl.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 97 "lexerl.mll"
                                                ( FLOATLIT(float_of_string lxm) )
# 360 "lexerl.ml"

  | 25 ->
let
# 98 "lexerl.mll"
                                                 lxm
# 366 "lexerl.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 98 "lexerl.mll"
                                                     ( STRINGLIT(lxm) )
# 370 "lexerl.ml"

  | 26 ->
let
# 99 "lexerl.mll"
                                                             tok
# 376 "lexerl.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 100 "lexerl.mll"
     (
         try
           Hashtbl.find keyword_table tok
         with Not_found -> IDENT(tok)
     )
# 384 "lexerl.ml"

  | 27 ->
# 105 "lexerl.mll"
          ( (*EOF*) raise Eof )
# 389 "lexerl.ml"

  | 28 ->
let
# 106 "lexerl.mll"
           c
# 395 "lexerl.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 106 "lexerl.mll"
             ( raise (LexFailure("SyntaxError: invalid character in identifier: " ^ Char.escaped c ^ " at line " ^ string_of_int !line_num)) )
# 399 "lexerl.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 41
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 109 "lexerl.mll"
          ( line_num := !line_num + 1; token lexbuf )
# 411 "lexerl.ml"

  | 1 ->
# 110 "lexerl.mll"
        ( comment lexbuf )
# 416 "lexerl.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

